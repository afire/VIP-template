{% include 'header' %}
import UIKit

protocol {{ module_info.name }}DisplayLogic: UIViewController {
    func displaySomething(viewModel: {{ module_info.name }}DataFlow.Something.ViewModel)
}

final class {{ module_info.name }}ViewController: UIViewController, ViewStatable {
    let interactor: {{ module_info.name }}BusinessLogic
    var state: {{ module_info.name }}DataFlow.ViewControllerState
    let router: {{ module_info.name }}RoutingLogic & {{ module_info.name }}DataPassing

    init(interactor: {{ module_info.name }}BusinessLogic, router: {{ module_info.name }}RoutingLogic & {{ module_info.name }}DataPassing, state:{{ module_info.name }}DataFlow.ViewControllerState = .loading) {
        self.interactor = interactor
        self.router = router
        self.state = state
        super.init(nibName: String(describing: {{ module_info.name }}ViewController.self), bundle: nil)
    }

    required init?(coder: NSCoder) { fatalError("init(coder:) has not been implemented") }

    override func viewDidLoad() {
        super.viewDidLoad()
        interactor.doSomething(request: .init())
    }
}

extension {{ module_info.name }}ViewController: {{ module_info.name }}DisplayLogic {
    func displaySomething(viewModel: {{ module_info.name }}DataFlow.Something.ViewModel) {
        render(state: viewModel.state)
    }

    func render(state: {{ module_info.name }}DataFlow.ViewControllerState) {
        self.state = state
        switch state {
        case .loading:
            print("loading")
        case .error(let message):
            print("error: \(message)")
        case .result(let modelView):
            print("result: \(modelView)")
        case .empty:
            print("empty")
        }
    }
}
